<?php

namespace {{ namespace }};

use {{ modelNamespace }}\{{ class }};
use App\Repositories\Contracts\{{ class }}RepositoryInterface;
use App\Repositories\Eloquent\BaseRepository;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;

class {{ class }}Repository extends BaseRepository implements {{ class }}RepositoryInterface
{
    /**
     * {{ class }}Repository constructor.
     *
     * @param {{ class }} $model
     */
    public function __construct({{ class }} $model)
    {
        parent::__construct($model);
    }

    /**
     * Define searchable columns for this model.
     * Override this method to customize search behavior.
     *
     * @return array
     */
    protected function getSearchableColumns(): array
    {
        return [
            'name', // Replace with or add other searchable columns as needed
            // 'email',
            // 'description',
        ];
    }

    /**
     * Find by a specific field.
     *
     * @param string $field
     * @param mixed $value
     * @param array $with
     * @return Model|null
     */
    public function findBy(string $field, mixed $value, array $with = []): ?Model
    {
        return $this->model->with($with)->where($field, $value)->first();
    }

    /**
     * Apply domain-specific filtering logic.
     * This method can be extended to add custom filtering for this specific model.
     *
     * @param array $criteria
     * @param array $with
     * @return Collection
     */
    public function applyDomainFilters(array $criteria, array $with = []): Collection
    {
        // Start with base filtering logic
        $query = $this->getFilterQuery($criteria, $with);
        
        // Add any entity-specific filtering rules here
        // For example:
        // if (isset($criteria['status']) && $criteria['status'] === 'active') {
        //     $query->where('is_active', true);
        // }
        
        return $query->get();
    }
}
