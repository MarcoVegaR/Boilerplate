<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use App\Http\Controllers\Traits\HasCrudIndex;
use App\Http\Controllers\Traits\HasCrudShow;
use App\Http\Controllers\Traits\HasCrudCreate;
use App\Http\Controllers\Traits\HasCrudEdit;
use App\Http\Controllers\Traits\HasCrudStore;
use App\Http\Controllers\Traits\HasCrudUpdate;
use App\Http\Controllers\Traits\HasCrudDestroy;
use App\Services\Contracts\{{ serviceNamespace }}{{ class }}ServiceInterface;
use {{ requestNamespace }}\Store{{ class }}Request;
use {{ requestNamespace }}\Update{{ class }}Request;

class {{ class }}Controller extends Controller
{
    use HasCrudIndex;
    use HasCrudShow;
    use HasCrudCreate;
    use HasCrudEdit;
    use HasCrudStore;
    use HasCrudUpdate;
    use HasCrudDestroy;

    /**
     * The service instance.
     *
     * @var {{ class }}ServiceInterface
     */
    protected $service;
    
    /**
     * The base view path.
     *
     * @var string
     */
    protected string $viewPath;
    
    /**
     * The base route name.
     *
     * @var string
     */
    protected string $routeName;
    
    /**
     * Columns to search in.
     *
     * @var array
     */
    protected array $searchColumns = ['name', 'title', 'description'];
    
    /**
     * Relationships to eager load.
     *
     * @var array
     */
    protected array $relationships = [];
    
    /**
     * Create a new controller instance.
     *
     * @param {{ class }}ServiceInterface $service
     */
    public function __construct({{ class }}ServiceInterface $service)
    {
        $this->service = $service;
        $this->viewPath = '{{ inertiaPath }}';
        $this->routeName = '{{ routePrefix }}';
    }

    /**
     * Provide specific validation rules for store action.
     *
     * @param Store{{ class }}Request $request
     * @return array
     */
    public function store(Store{{ class }}Request $request)
    {
        return $this->storeItem($request);
    }
    
    /**
     * Provide specific validation rules for update action.
     *
     * @param Update{{ class }}Request $request
     * @param string|int $id
     * @return array
     */
    public function update(Update{{ class }}Request $request, $id)
    {
        return $this->updateItem($request, $id);
    }
    
    /**
     * Get additional data for views.
     *
     * @return array
     */
    protected function getAdditionalData(): array
    {
        // Override this method to provide additional data to your views
        return [];
    }
}
