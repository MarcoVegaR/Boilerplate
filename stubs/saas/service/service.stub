<?php

namespace {{ namespace }};

use {{ modelNamespace }}\{{ class }};
use App\Repositories\Contracts\{{ class }}RepositoryInterface;
use App\Services\BaseService;
use App\Services\Contracts\{{ class }}ServiceInterface;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class {{ class }}Service extends BaseService implements {{ class }}ServiceInterface
{
    /**
     * Create a new service instance.
     *
     * @param {{ class }}RepositoryInterface $repository
     */
    public function __construct({{ class }}RepositoryInterface $repository)
    {
        parent::__construct($repository);
    }

    /**
     * Custom method example for domain-specific business logic.
     * This is just a template - add your domain logic methods here.
     *
     * @param string|int $key The ID of the {{ class }}
     * @param array $additionalData Any additional data needed for the operation
     * @return Model The {{ class }} model after processing
     */
    public function processBusinessLogic(string|int $key, array $additionalData = []): Model
    {
        try {
            DB::beginTransaction();
            
            // Get the model
            $model = $this->show($key);
            
            // Process domain-specific logic here
            // For example:
            // if (isset($additionalData['someFlag']) && $additionalData['someFlag']) {
            //     $this->performSpecialAction($model);
            // }
            
            // Maybe update the model with new data
            if (!empty($additionalData['updateData'])) {
                $model = $this->update($key, $additionalData['updateData']);
            }
            
            DB::commit();
            return $model;
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
        }
    }
    
    /**
     * Override search functionality if needed with domain-specific logic.
     * This is optional - the base implementation is usually sufficient.
     *
     * @param string $term
     * @param array $columns
     * @param int $perPage
     * @return \Illuminate\Pagination\LengthAwarePaginator
     */
    /*
    public function search(string $term, array $columns, int $perPage = 15): \Illuminate\Pagination\LengthAwarePaginator
    {
        // Add any domain-specific search logic here
        return parent::search($term, $columns, $perPage);
    }
    */
}
